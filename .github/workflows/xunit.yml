# Run unit tests
name: Run XUnit Tests
permissions:
  id-token: write
  contents: read

# Define Parameters
on:
  workflow_call:
    inputs:
      docker-compose:   # Path to docker-compose.yml file: If populated, spins up containers required for integration tests
        type: string
      branch-threshold: # Test coverage threshold (integer): workflow will fail if branch coverage does not meet or exceed this threshold
                        # If NOT populated, use historic data from previous runs as the threshold.
                        # Historic data stored in S3, so the AWS secrets must be populated in this instance
        type: number
        default: 0
      coverage-s3-path: # S3 path of the CSV that stores historic coverage data (file can contain multiple repos/branches)
        type: string
      never-fail-at:
        type: number
        default: 95
      region:
        type: string
        default: us-east-1
      aws-role-arn:
        required: true
        type: string
      debug:
        type: string
        default: 'FALSE'
      dotnet-version:
        required: false
        type: string
        default: null
      config-file-s3-root:
        required: false
        type: string
      config-file:
        required: false
        type: string
      copy-config-file-to-projects:
        required: false
        type: string
    secrets:
      PKG_TOKEN:
        required: true

jobs:
  xunit:
    name: Run XUnit Tests
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3

      # Compare against historic coverage (BRANCH_THRESHOLD is empty or 0, AWS secrets populated)
      # Historic data stored in a CSV file in S3, and is updated if coverage improves.
      - name: Configure AWS credentials
        if: ${{ inputs.branch-threshold <= 0 || inputs.config-file != ''}}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws-role-arn }}
          role-duration-seconds: 900
          aws-region: ${{ inputs.region }}

      - name: Copy config file from s3 
        if: ${{ inputs.config-file != ''}}
        env:
          CONFIG_FILE: ${{ inputs.config-file }}
          CONFIG_FILE_S3_ROOT: ${{ inputs.config-file-s3-root }}
        run: |
          aws s3 cp $CONFIG_FILE_S3_ROOT/$CONFIG_FILE .

      - name: Copy config file to projects
        if: ${{ inputs.copy-config-file-to-projects != '' }}
        env:
          PROJECTS: ${{ inputs.copy-config-file-to-projects }}
          CONFIG_FILE: ${{ inputs.config-file }}
        run: |
          for project in $PROJECTS
          do
            cp $CONFIG_FILE $project
          done

      # Spins up services via Docker-compose
      - name: Start containers
        if: ${{ inputs.docker-compose != '' }}
        run: docker compose -f ${{ inputs.docker-compose }} up -d
      
      # Login to GitHub packages
      - name: Login to GitHub packages
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
          source-url: https://nuget.pkg.github.com/amdigital-co-uk/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.PKG_TOKEN}}
    
      # Run Unit Tests
      - name: Run Unit Tests
        run: dotnet test --collect:"XPlat Code Coverage"

      - name: Install code coverage tool
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
        
      - name: Run report generation
        run: reportgenerator -reports:$GITHUB_WORKSPACE/*/TestResults/*/coverage.cobertura.xml -targetdir:$RUNNER_TEMP/coverlet/reports -reporttypes:"cobertura"

      # Compare against static threshold (BRANCH_THRESHOLD is populated)
      - name: Check Branch Coverage against static threshold
        if: ${{ inputs.branch-threshold > 0 }}
        uses: amdigital-co-uk/code-coverage-action@v1.0
        with:
          path: ${{ runner.temp }}/coverlet/reports/Cobertura.xml
          branch_minimum_threshold: ${{ inputs.branch-threshold }}

      - name: Check Branch Coverage against historic data
        if: ${{ inputs.branch-threshold <= 0 }}
        env:
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          COVERAGE_S3_PATH: ${{ inputs.coverage-s3-path }}
          NEVER_FAIL_AT: ${{ inputs.never-fail-at }}
          PERSIST: false
          DEBUG: ${{ inputs.debug }}
        run: |
          # Utility Functions
          log_debug() {
            if [ "$DEBUG" = "true" ]; then echo $@; fi
          }
          get_branch() {
              if [ -f "$1" ]; then
                  raw=$(cat "$1" | sed -e 's/\r//g' | grep -Po --color=never '<coverage.+branch-rate="\K[^"]+')
                  echo "$raw * 100" | bc -l | head -c 6
              else
                  echo 0
              fi
          }
          get_record() {
                  local record=$(cat coverage.csv | grep "^$1,$2,")
                  [ -z "$record" ] && record=$(cat coverage.csv | grep "^$1,$3,")
                  echo $record
          }

          # Set behaviour based on current branch
          [ "$BRANCH" = "main" ] && PERSIST=true
          [ "$BRANCH" = "main" ] || BRANCH=latest

          # Retrieve or create coverage CSV
          aws s3 cp --quiet $COVERAGE_S3_PATH coverage.csv || true
          if [ ! -f "coverage.csv" ]
          then
              log_debug "coverage.csv not present, creating placeholder"
              echo "Repository,Branch,Total Branch Rate,Integration Branch Rate,Unit Branch Rate"  > coverage.csv
              PERSIST=true
          else
              log_debug "coverage.csv downloaded OK"
          fi

          # Parse current branch coverage
          integ_report=$(find . -iname coverage.cobertura.xml | grep "\.IntegrationTest" || true)
          unit_report=$(find . -iname coverage.cobertura.xml | grep "\.Test" || true)
          log_debug "integ_report=$integ_report, unit_report=$unit_report"
          total_rate=$(get_branch "$RUNNER_TEMP/coverlet/reports/Cobertura.xml")
          integ_rate=$(get_branch "$integ_report")
          unit_rate=$(get_branch "$unit_report")
          echo "Branch coverage rates for $REPO@$BRANCH -- Total: $total_rate, IntegrationTests: $integ_rate, UnitTests: $unit_rate"


          # Parse historic coverage and cross-check
          record=$(get_record "$REPO" "main" "latest")
          log_debug "$record"

          if [ -n "$record" ]
          then
              total_persist=$(echo $record | cut -d, -f3)
              integ_persist=$(echo $record | cut -d, -f4)
              unit_persist=$(echo $record | cut -d, -f5)

              if (( $(echo "$total_persist > $total_rate" | bc -l) ))
              then
                  if (( $(echo "$NEVER_FAIL_AT < $total_rate" | bc -l) ))
                  then
                      echo "::notice title=Branch coverage fallen::Test coverage has dropped from $total_persist to $total_rate, but is still above $NEVER_FAIL_AT"
                  else
                      echo "::error title=Branch coverage failure::Test coverage has dropped from $total_persist to $total_rate"
                      exit 1
                  fi
              else
                  echo "::notice title=Branch coverage maintained::Test coverage maintained from $total_persist to $total_rate"
              fi

              # Remove current coverage values
              cat coverage.csv | grep -v "^$REPO,$BRANCH," > repos.tmp
              mv repos.tmp coverage.csv
          else
              echo "::notice::First time coverage reporting for $REPO@$BRANCH. Coverage is $total_rate"
          fi

          # Add new coverage values and persist
          echo "$REPO,$BRANCH,$total_rate,$integ_rate,$unit_rate" >> coverage.csv
          [ "$PERSIST" = "true" ] && log_debug "Copying coverage.csv to $COVERAGE_S3_PATH"
          [ "$PERSIST" = "true" ] && aws s3 cp --quiet coverage.csv $COVERAGE_S3_PATH
          log_debug "Coverage checking passed"

          exit 0

      - name: List files in case of failure
        if: failure()
        run: |
          find . -iname coverage.cobertura.xml
          find . | grep -v .git/