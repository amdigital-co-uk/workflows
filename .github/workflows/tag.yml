name: Add Git tags

permissions:
  contents: write

on:
  pull_request:
    branches:
      - main
    types: [ closed ]

jobs:
  tag-version:
    if: github.event.pull_request.merged == true
    name: Add Git tags
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Detect labels & tags
        id: detect-labels
        env:
          MAJOR: ${{ contains(github.event.pull_request.labels.*.name, 'major') }}
          MINOR: ${{ contains(github.event.pull_request.labels.*.name, 'minor') }}
          PATCH: ${{ contains(github.event.pull_request.labels.*.name, 'patch') }}
        run: |
          # Get the latest tag and remove the leading 'v'
          version=$(git tag --list v*.*.* | sort -V | tail -n1 | cut -dv -f2-)
          echo version=$version

          # Set the version output
          echo "version=$version" >> "$GITHUB_OUTPUT"

          # Set the bump output based on the label
          if [ "$MAJOR" = "true" ]
          then
              echo "version=$version, bump=major"
              echo "bump=major" >> "$GITHUB_OUTPUT"
          elif [ "$MINOR" = "true" ]
          then
              echo "version=$version, bump=minor"
              echo "bump=minor" >> "$GITHUB_OUTPUT"
          elif [ "$PATCH" = "true" ]
          then
              echo "version=$version, bump=patch"
              echo "bump=patch" >> "$GITHUB_OUTPUT"
          else
              echo "version=$version, bump=none"
              echo "bump=none" >> "$GITHUB_OUTPUT"
          fi

      - name: Install semver CLI tool
        run: |
          curl -L https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.4.0/src/semver -o semver
          chmod +x semver

      - name: Add version tags
        if: ${{ steps.detect-labels.outputs.bump != 'none' }}
        run: |
          # Set tags based on outputs from detect-labels
          TAGS=v$(./semver bump ${{ steps.detect-labels.outputs.bump }} ${{ steps.detect-labels.outputs.version }})

          for t in $(echo $TAGS | tr '.' '\n')
          do
              if [ -z "$tag" ]
              then
                  tag=$t
              else
                  tag=$tag.$t
              fi

              if [ "$(git tag | grep "^$tag$" | wc -l)" = "0" ]
              then
                  #echo $tag does not exist
                  git tag $tag
                  git push origin $tag
              else
                  #echo $tag exists
                  git tag --delete $tag
                  git push --delete origin $tag
                  git tag $tag
                  git push origin $tag
              fi

          done
      