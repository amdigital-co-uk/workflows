# CI workflow for 
name: Build and Deploy Function
permissions:
  id-token: write
  contents: read

# Define triggers for when the workflow will run
on:
  workflow_call:
    inputs:
      ref:
        type: string
      docker-namespace: # Docker Namespace: Typically this will be 'qtfn' for a lambda function
        required: true
        type: string
      docker-image:     # Docker Image
        required: true
        type: string
      docker-tag:       # Docker Tag
        required: false
        type: string
        default: 'latest'
      workdir:
        required: false
        type: string
        default: '.'
      aws-role-arn:
        required: true
        type: string
      ecr-region-1:     # Primary AWS ECR region
        required: true
        type: string
      ecr-region-2:     # Secondary AWS ECR region to push the Docker image to (optional)
        type: string
      build-npmrc:
        required: false
        type: boolean
        default: false
    secrets:
      PKG_TOKEN:
        required: false

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    env:
      REF: ${{ inputs.ref }}
      TAG: ${{ inputs.docker-tag }}
    steps:
      # Checks-out repository
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      # Determine correct Docker tag based on branch/release
      ## NOTE: using the stage/* & main branching strategy
      - name: Set tag based on branch
        run: |
          if [[ "$REF" == refs/heads/* ]]
          then
            SCC_BRANCH=$(echo ${REF#refs/heads/})
            echo "Branch/Tag parsing: HEAD case -- REF=$REF"
          elif [[ "$REF" == refs/tags/* ]]
          then
            SCC_TAG=$(echo ${REF#refs/tags/})
            echo "Branch/Tag parsing: TAG case -- REF=$REF"
          else
            SCC_BRANCH=$REF
            echo "Branch/Tag parsing: DEFAULT case -- REF=$REF"
          fi
          
          [[ "$SCC_BRANCH" == feature/* ]] && DK_TAG=feature-$(echo ${SCC_BRANCH#feature/})
          [[ "$SCC_BRANCH" == bug/* ]] && DK_TAG=fix-$(echo ${SCC_BRANCH#bug/})
          [[ "$SCC_BRANCH" == release/* ]] && DK_TAG=release-$(echo ${SCC_BRANCH#release/})
          [[ "$SCC_BRANCH" == stage/* ]] && TAG=$(echo ${SCC_BRANCH#stage/})
          [[ "$SCC_TAG" == v* ]] && TAG=$SCC_TAG
          echo "BRANCH=$SCC_BRANCH"
          echo "TAG=$TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV
      
      # Login to ECR_REGION_1
      # See https://github.com/marketplace/actions/amazon-ecr-login-action-for-github-actions
      - name: Configure AWS credentials ${{ inputs.ecr-region-1 }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.aws-role-arn }}
          role-duration-seconds: 900
          aws-region: ${{ inputs.ecr-region-1 }}
      - name: Login to Amazon ECR ${{ inputs.ecr-region-1 }}
        id: login-ecr-1
        uses: aws-actions/amazon-ecr-login@v1
        
      # Login to ECR_REGION_2
      - name: Configure AWS credentials ${{ inputs.ecr-region-2 }}
        if: ${{ inputs.ecr-region-2 != '' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.aws-role-arn }}
          role-duration-seconds: 900
          aws-region: ${{ inputs.ecr-region-2 }}
      - name: Login to Amazon ECR ${{ inputs.ecr-region-2 }}
        if: ${{ inputs.ecr-region-2 != '' }}
        id: login-ecr-2
        uses: aws-actions/amazon-ecr-login@v1
          
      # Npmrc Setup
      - name: Npm Access Setup
        if: ${{ inputs.build-npmrc == true }}
        id: npmrcsetup
        run: |
          cd ${{ inputs.WORKDIR }}
          cat >.npmrc <<EOL
          //npm.pkg.github.com/:_authToken=${{ secrets.PKG_TOKEN }}
          @amdigital-co-uk:registry=https://npm.pkg.github.com/
          EOL
      
      # Build container via Docker & push to ECR
      - name: Build Docker Image
        id: build
        env:
          DK_NAMESPACE: ${{ inputs.docker-namespace }}
          DK_IMAGE: ${{ inputs.docker-image }}
          DK_REG_1: ${{ steps.login-ecr-1.outputs.registry }}
          DK_REG_2: ${{ steps.login-ecr-2.outputs.registry }}
        run: |
          cd ${{ inputs.WORKDIR }}
          docker build . -t $DK_REG_1/$DK_NAMESPACE/$DK_IMAGE:$TAG
          docker push $DK_REG_1/$DK_NAMESPACE/$DK_IMAGE:$TAG
          if [ -n "$ECR_REGION_2" ] && [ -n "$DK_REG_2" ] 
          then 
            docker tag $DK_REG_1/$DK_NAMESPACE/$DK_IMAGE:$TAG $DK_REG_2/$DK_NAMESPACE/$DK_IMAGE:$TAG
            docker push $DK_REG_2/$DK_NAMESPACE/$DK_IMAGE:$TAG
          fi
